name: Comprehensive IDT Testing

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      branch:
        description: 'Branch to test'
        required: false
        default: 'ImageDescriber'
        type: string
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC

jobs:
  comprehensive-test:
    runs-on: windows-latest
    timeout-minutes: 120  # 2 hours max
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
      shell: cmd
    
    - name: Build all applications
      run: |
        call releaseitall.bat
      shell: cmd
      
    - name: Verify build outputs
      run: |
        if not exist "releases\idt2.zip" (
          echo ERROR: Master package not created
          exit /b 1
        )
        echo Build verification passed
      shell: cmd
    
    - name: Install Ollama
      run: |
        # Download Ollama installer
        Invoke-WebRequest -Uri "https://ollama.ai/download/windows" -OutFile "ollama_installer.exe"
        
        # Install silently
        Start-Process -FilePath "ollama_installer.exe" -ArgumentList "/S" -Wait
        
        # Add to PATH for this session
        $env:PATH += ";C:\Users\runneradmin\AppData\Local\Programs\Ollama"
        
        # Wait for service to start
        Start-Sleep -Seconds 30
        
        # Verify installation
        ollama --version
      shell: powershell
    
    - name: Download required models
      run: |
        # Set PATH
        $env:PATH += ";C:\Users\runneradmin\AppData\Local\Programs\Ollama"
        
        # Pull moondream (lightweight, fast)
        Write-Host "Downloading moondream model..."
        ollama pull moondream
        
        # Pull gemma3 (medium quality)
        Write-Host "Downloading gemma3 model..."  
        ollama pull gemma3
        
        # List installed models
        Write-Host "Installed models:"
        ollama list
      shell: powershell
      timeout-minutes: 30
    
    - name: Create test data placeholders
      run: |
        # Create test files (placeholders for real test data)
        mkdir test_data\nested
        echo "Test video placeholder" > test_data\video_12sec.txt
        echo "Test HEIC placeholder" > test_data\photo.txt  
        echo "Test JPG placeholder" > test_data\image.txt
        echo "Test nested 1" > test_data\nested\nested_image1.txt
        echo "Test nested 2" > test_data\nested\nested_image2.txt
      shell: cmd
    
    - name: Run comprehensive workflow test
      run: |
        # Set PATH for Ollama
        $env:PATH += ";C:\Users\runneradmin\AppData\Local\Programs\Ollama"
        
        # Run allmodeltest with batch mode
        cmd /c "bat\allmodeltest.bat test_data --batch --name github_actions_test"
      shell: powershell
      timeout-minutes: 45
    
    - name: Validate outputs
      run: |
        # Check if workflow directories were created
        $workflows = Get-ChildItem -Path "Descriptions" -Directory -Name "wf_github_actions_test_*"
        $workflowCount = $workflows.Count
        
        Write-Host "Found $workflowCount workflow directories"
        
        if ($workflowCount -eq 0) {
          Write-Error "No workflow output directories found!"
          exit 1
        }
        
        # Validate each workflow directory
        $validationPassed = 0
        foreach ($workflow in $workflows) {
          $path = "Descriptions\$workflow"
          Write-Host "Validating $path..."
          
          $requiredFiles = @(
            "$path\image_descriptions.txt",
            "$path\index.html", 
            "$path\view_results.bat"
          )
          
          $allFilesExist = $true
          foreach ($file in $requiredFiles) {
            if (-not (Test-Path $file)) {
              Write-Host "Missing: $file"
              $allFilesExist = $false
            }
          }
          
          if ($allFilesExist) {
            $validationPassed++
            Write-Host "✓ $workflow validation passed"
          } else {
            Write-Host "✗ $workflow validation failed"
          }
        }
        
        Write-Host "Validation Summary: $validationPassed/$workflowCount workflows passed"
        
        if ($validationPassed -ne $workflowCount) {
          Write-Error "Some workflow validations failed"
          exit 1
        }
        
        Write-Host "All validations passed!"
      shell: powershell
    
    - name: Test analysis tools
      run: |
        # Test CombineDescriptions
        Write-Host "Testing CombineDescriptions..."
        python analysis\combine_workflow_descriptions.py
        
        # Test Stats Analysis  
        Write-Host "Testing Stats Analysis..."
        python analysis\stats_analysis.py
        
        Write-Host "Analysis tools testing completed"
      shell: powershell
      continue-on-error: true  # Don't fail entire workflow if analysis tools have issues
    
    - name: Generate test report
      run: |
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $report = @"
# IDT Comprehensive Test Report

**Test Date**: $timestamp
**Branch**: ${{ github.ref }}
**Commit**: ${{ github.sha }}

## Results Summary

### Build Phase
- ✅ All applications built successfully
- ✅ Master package (idt2.zip) created

### Environment Setup  
- ✅ Ollama installed
- ✅ Required models downloaded (moondream, gemma3)

### Workflow Testing
- ✅ AllModelTest completed
- ✅ Multiple workflow directories created
- ✅ Output validation passed

### Analysis Tools
- ⚠️ See step results (may have warnings)

## Workflow Outputs

"@
        
        # List created workflows
        $workflows = Get-ChildItem -Path "Descriptions" -Directory -Name "wf_github_actions_test_*"
        foreach ($workflow in $workflows) {
          $report += "`n- $workflow"
        }
        
        $report | Out-File -FilePath "test_report.md" -Encoding UTF8
        Write-Host "Test report generated: test_report.md"
        Get-Content "test_report.md"
      shell: powershell
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if tests fail
      with:
        name: test-results-${{ github.run_number }}
        path: |
          Descriptions/
          test_report.md
          releases/
        retention-days: 30
    
    - name: Upload logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-logs-${{ github.run_number }}
        path: |
          *.log
          logs/
        retention-days: 7