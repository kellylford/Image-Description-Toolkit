name: Automated Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit Tests
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        python run_unit_tests.py
        
    - name: Check test results
      if: failure()
      run: |
        echo "Tests failed! Check the output above for details."
        exit 1

  syntax-check:
    name: Syntax & Import Check
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check syntax of main scripts
      run: |
        python -m py_compile scripts/workflow.py
        python -m py_compile scripts/image_describer.py
        python -m py_compile scripts/metadata_extractor.py
        python -m py_compile idt_cli.py
        
    - name: Test imports
      run: |
        cd scripts
        python -c "import workflow_utils; print('workflow_utils OK')"
        python -c "import image_describer; print('image_describer OK')"
        python -c "import metadata_extractor; print('metadata_extractor OK')"

  build-test:
    name: PyInstaller Build Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Test CLI build
      run: |
        pyinstaller --clean --noconfirm idt_cli_build.spec
        
    - name: Verify build artifacts
      run: |
        if (!(Test-Path "dist/idt.exe")) {
          Write-Error "idt.exe not found in dist/"
          exit 1
        }
        Write-Host "Build successful: idt.exe created"
        
    - name: Check executable size
      run: |
        $size = (Get-Item dist/idt.exe).Length / 1MB
        Write-Host "idt.exe size: $([math]::Round($size, 2)) MB"
        if ($size -lt 10) {
          Write-Error "Executable seems too small, possible build issue"
          exit 1
        }

  build-scripts-check:
    name: Build Scripts Validation
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate batch file syntax
      run: |
        Write-Host "Validating build and release batch files..."
        $errors = 0
        
        # List of critical batch files to check
        $batchFiles = @(
          "BuildAndRelease\builditall.bat",
          "BuildAndRelease\packageitall.bat", 
          "BuildAndRelease\releaseitall.bat",
          "BuildAndRelease\build_idt.bat",
          "tools\environmentsetup.bat"
        )
        
        foreach ($file in $batchFiles) {
          if (!(Test-Path $file)) {
            Write-Warning "File not found: $file"
            $errors++
            continue
          }
          
          Write-Host "Checking: $file"
          
          # Read file content
          $content = Get-Content $file -Raw
          
          # Check for common syntax errors
          # 1. Unclosed quotes
          $quoteCount = ($content -split '"').Count - 1
          if ($quoteCount % 2 -ne 0) {
            Write-Error "  Possible unclosed quote in $file"
            $errors++
          }
          
          # 2. Unmatched parentheses
          $openParen = ($content -split '\(').Count - 1
          $closeParen = ($content -split '\)').Count - 1
          if ($openParen -ne $closeParen) {
            Write-Error "  Unmatched parentheses in $file (open: $openParen, close: $closeParen)"
            $errors++
          }
          
          # 3. Check for bare command calls (should use 'call' for batch files)
          if ($content -match '\n\s*[a-z_]+\s*$' -and $file -match 'releaseitall') {
            Write-Warning "  Possible bare command in $file - should use 'call' for .bat files"
          }
          
          # 4. Check for trailing commands without proper exit
          $lines = Get-Content $file
          $lastLine = $lines[-1].Trim()
          if ($lastLine -and $lastLine -notmatch '^(pause|exit|goto|rem|::|echo)') {
            Write-Warning "  File $file ends with command: '$lastLine' - may cause issues"
          }
          
          Write-Host "  âœ“ $file passed basic checks"
        }
        
        if ($errors -gt 0) {
          Write-Error "Found $errors syntax errors in batch files"
          exit 1
        }
        
        Write-Host "All batch files passed validation"
